
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get environment variables with fallbacks and debugging
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Debug logging
console.log('Supabase Client Debug:', {
  VITE_SUPABASE_URL: SUPABASE_URL ? 'Set' : 'Missing',
  VITE_SUPABASE_ANON_KEY: SUPABASE_PUBLISHABLE_KEY ? 'Set' : 'Missing',
  importMetaEnvKeys: Object.keys(import.meta.env).filter(key => key.startsWith('VITE_')),
  importMetaEnv: import.meta.env
});

// Create a fallback client if environment variables are missing
let supabase: any;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error('❌ Supabase environment variables are missing!');
  console.error('Available environment variables:', Object.keys(import.meta.env));
  
  // Create a dummy client that will show errors but won't crash the app
  supabase = {
    auth: {
      getSession: async () => ({ data: { session: null }, error: new Error('Supabase not configured') }),
      signIn: async () => ({ error: new Error('Supabase not configured') }),
      signUp: async () => ({ error: new Error('Supabase not configured') }),
      signOut: async () => ({ error: new Error('Supabase not configured') }),
      onAuthStateChange: () => ({ data: { subscription: null } }),
    },
    from: () => ({
      select: () => ({ eq: () => ({ single: async () => ({ data: null, error: new Error('Supabase not configured') }) }) }),
      insert: async () => ({ data: null, error: new Error('Supabase not configured') }),
      update: async () => ({ data: null, error: new Error('Supabase not configured') }),
      delete: async () => ({ data: null, error: new Error('Supabase not configured') }),
    }),
  };
  
  console.warn('⚠️ Using fallback Supabase client. Please configure environment variables.');
} else {
  // Log successful configuration
  console.log('✅ Supabase client configured successfully');
  
  // Create the real Supabase client
  supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    }
  });
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export { supabase };